<?xml version="1.0" encoding="UTF-8"?>
<activity id="52" moduleid="732" modulename="vpl" contextid="18636">
  <vpl id="52">
    <name>Lab 3 - Part C - Debugging</name>
    <shortdescription></shortdescription>
    <intro>&lt;p&gt;&lt;/p&gt;&lt;p dir="ltr" id="docs-internal-guid-570f1543-7fff-e793-ee04-3794cc9f116b"&gt;&lt;b&gt;-----------------------------------------------------&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr"&gt;In your lab3c.py file there is function definition that contains both syntax and semantic errors. Your job is to remove these bugs such that this function runs properly.&amp;nbsp; &lt;br&gt;&lt;/p&gt;&lt;p dir="ltr"&gt;Run the code using the rocket icon.&amp;nbsp; Read the error messages to help you locate the syntax errors.&amp;nbsp; &lt;br&gt;&lt;/p&gt;&lt;p dir="ltr"&gt;When your code runs, if the calls to the &lt;i&gt;&lt;b&gt;assertEqual&lt;/b&gt;&lt;/i&gt;
 function do not all come back with a 'SUCCESS' message, you need to 
identify whether the mistake is in the predicted values you are 
passing to &lt;i&gt;&lt;b&gt;assertEqua&lt;/b&gt;&lt;/i&gt;l or whether your function has semantic errors.&amp;nbsp; &lt;br&gt;&lt;/p&gt;&lt;p dir="ltr"&gt;Adding
 print statements to display the values of your variables at different 
points in your program can help in the debugging process. &amp;nbsp;However, be 
sure to remove them once you have the code working correctly.&lt;/p&gt;&lt;p dir="ltr"&gt;Fix all errors until you are confident that your function runs correctly.&lt;/p&gt;&lt;b&gt;---------------------------------------&lt;/b&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir="ltr"&gt;&lt;b&gt;Problem 24 [ 1 point Autograded for correctness]&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;p dir="ltr"&gt;The function&amp;nbsp;&lt;b&gt; &lt;code&gt;total_puchase&lt;/code&gt;&amp;nbsp; &lt;/b&gt;should calculate the total price of tickets to a movie based on how many adult and child tickets are being purchased.&amp;nbsp;It consumes two &lt;b&gt;&lt;i&gt;ints&lt;/i&gt;&lt;/b&gt; representing the number of adult tickets and number of child tickets being purchased in that order.&lt;br&gt;&lt;/p&gt;&lt;p dir="ltr"&gt;Adult tickets cost $10.00 per ticket and child tickets cost $7.50 per ticket.&amp;nbsp;If the cost is $50 or more they get a discount of 20% off their total price, if the cost is $40 or more they get a discount of 15% off their total price and if their total price is $30 or more they get a 10% discount off their total price. The discounts are not cumulative---only the highest discount is applied.&lt;/p&gt;&lt;p dir="ltr"&gt;The code should return the total price of the purchase. &amp;nbsp;The value should be rounded to two decimal places.&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;</intro>
    <introformat>1</introformat>
    <startdate>0</startdate>
    <duedate>1538625300</duedate>
    <maxfiles>1</maxfiles>
    <maxfilesize>0</maxfilesize>
    <requirednet></requirednet>
    <password>ntb382</password>
    <grade>1</grade>
    <visiblegrade>1</visiblegrade>
    <usevariations>0</usevariations>
    <variationtitle>$@NULL@$</variationtitle>
    <basedon>0</basedon>
    <basedonname>$@NULL@$</basedonname>
    <run>1</run>
    <debug>0</debug>
    <evaluate>1</evaluate>
    <evaluateonsubmission>0</evaluateonsubmission>
    <automaticgrading>1</automaticgrading>
    <maxexetime>$@NULL@$</maxexetime>
    <restrictededitor>1</restrictededitor>
    <example>0</example>
    <maxexememory>$@NULL@$</maxexememory>
    <maxexefilesize>$@NULL@$</maxexefilesize>
    <maxexeprocesses>$@NULL@$</maxexeprocesses>
    <jailservers>$@NULL@$</jailservers>
    <emailteachers>0</emailteachers>
    <worktype>0</worktype>
    <timemodified>1537451775</timemodified>
    <freeevaluations>0</freeevaluations>
    <reductionbyevaluation>0</reductionbyevaluation>
    <sebrequired>0</sebrequired>
    <sebkeys></sebkeys>
    <runscript></runscript>
    <debugscript></debugscript>
    <required_files>
      <required_file id="">
        <name>required_files.lst</name>
        <content>lab3c.py</content>
        <encoding>0</encoding>
      </required_file>
      <required_file id="">
        <name>required_files/lab3c.py</name>
        <content># This is where you will write your code for Lab 3 Part C
# Do not delete these lines
from cisc106 import *

# ---------------------------------------------------------
# Lab 3 - Part C
# ----------------------------------------------
# Student Name: 
# Lab Section Number: 
# Partner Name:
# Partner UDID:
# Lab 3 - Debugging Functions 
# ----------------------------------------------

# Problem 24 

def total_purchase(num_adult, num_child):
    '''
    Computes the total price of movie tickets
    Parameters:
        num_adult: (int) - number of adult tickets being purchased
        num_child: (int) - number of child tickets being purchased
    Returns:
        total cost: (float)
    '''
    total_adult  = adult * $7.5
    total_ child  += num_child * $10.0
    total = total_adult + total_child
    if total == 50:  
        total -= total * .20
    if total == 40:
        total += total * .20
    if total &gt; 30.00:
        totalDollar -= total * .15
    else: 
        return total

assertEqual(total_purchase(2,4),40)
assertEqual(total_purchase(4,1),34.00)
assertEqual(total_purchase(0,4),25.5)

</content>
        <encoding>0</encoding>
      </required_file>
    </required_files>
    <execution_files>
      <execution_file id="">
        <name>execution_files.lst</name>
        <content>vpl_run.sh
vpl_debug.sh
vpl_evaluate.sh
vpl_evaluate.cases
evalLab3c.py
cisc106.py</content>
        <encoding>0</encoding>
      </execution_file>
      <execution_file id="">
        <name>execution_files.lst.keep</name>
        <content>evalLab3c.py
cisc106.py</content>
        <encoding>0</encoding>
      </execution_file>
      <execution_file id="">
        <name>execution_files/vpl_debug.sh</name>
        <content></content>
        <encoding>0</encoding>
      </execution_file>
      <execution_file id="">
        <name>execution_files/vpl_evaluate.cases</name>
        <content></content>
        <encoding>0</encoding>
      </execution_file>
      <execution_file id="">
        <name>execution_files/vpl_run.sh</name>
        <content>#!/bin/bash
echo "#!/bin/bash" &gt; vpl_execution
if [ -f ./vpl_evaluate.sh ] ; then
      echo "python3 evalLab3c.py" &gt;&gt; vpl_execution
else
      echo "python3 lab3c.py" &gt;&gt; vpl_execution
fi
chmod +x vpl_execution</content>
        <encoding>0</encoding>
      </execution_file>
      <execution_file id="">
        <name>execution_files/vpl_evaluate.sh</name>
        <content>#! /bin/bash
# vpl_evaluate.sh
echo "#! /bin/bash" &gt; vpl_execution
echo "python3 evalLab3c.py"&gt;&gt; vpl_execution
chmod +x vpl_execution</content>
        <encoding>0</encoding>
      </execution_file>
      <execution_file id="">
        <name>execution_files/cisc106.py</name>
        <content>'''
CISC106 Module that includes some basic helper functions such as assertEqual().

Versions:
0.142 - 2014-APR-23, Modified by Jon Leighton
 + Modified success and failure messages to print "SUCCESS" and "FAILURE" at the
   beginning of each result. This makes it much easier to quickly discern the
   outcome visually.
0.141 - 2014-MAR-26, Modified by Jon Leighton
 + Removed unused function print_verbose().
 + Appended text to FAILURE message for incompatible types to indicate that types
   involved can't be compared.
0.14 - 2014-MAR-26, Modified by Andrew Roosen
 + Modified assertEqual() to return False on failure and True on success.
 + Introduced QUITE option to supress output on SUCCESS.
 + Modified FAILURE message for incompatible data types to be consistent with
 + FAILURE message for unequal values.
 + Modified names of internal functions isEqual() and isseqtype() to __isEqual()
   and __isseqtype(), respectively
0.13 - 2014-MAR-25, Modified by Jon Leighton
 + added elif clause to __isEqual(), to avoid comparing ints and floats to anything
   that is not an int or a float, and to return None in this case. The previous
   comparison tried to subtract these quantities from each other, causing a
   runtime error.
 + Modified assertEqual() to check for __isEqual() returning None, which now
   indicates an attempt to compare unrelated data types. Failure message is
   modified in this case to report the attempt to compare unrelated types.
 + Removed unused global variables fail and success.
 + Added version numbers to Paul Amer's modifications, and bumped version number to
   reflect my modifications.
 + Changed version number to string, to match recommended practice.
0.122 - 2012-APR-17, Modified by Paul Amer
 + removed graphics stuff; just kept AssertEqual
0.121 - 2011-SEP-08, Modified by Paul Amer
 +improved success-failure messages
0.12
 + display can be called multiple times
 + assertEqual supports PIL.Image.Image
0.1
 + Initial assertEqual, display, animate, bind
'''
__version__ = '0.141'

import sys, traceback, types, os

# Don't print message from assertEqual on success
QUIET=False

def assertEqual(x, y, *args):
    """
    Checks an expected value using the __isEqual function.
    Prints a message if the test case passed or failed.
    """
    
    trace = traceback.extract_stack()
    frame = trace[len(trace)-2]

    # messages modified 2014-MAR-25, JTL
    # messages modified 2011-SEP-09, PDA
    # variables fail and success not used
    result = __isEqual(x, y, *args)
    if result == None:
        print('FAILURE - [line', frame[1], '] ', frame[3], ', predicted answer was ',
              y, ' ', type(y), ', computed answer was ', x, ' ', type(x),
              ' (Attempting to compare unrelated data types.)', sep = '')
        return False
    elif not result:
        print("FAILURE - [line %d] %s, predicted answer was %s, computed answer was %s " \
            % (frame[1], frame[3], y, x))
        return False
    elif not QUIET:
        print("SUCCESS - [line %d] %s" % (frame[1], frame[3]))
    return True

def __isEqual(x, y, *args):
    """
    __isEqual : thing thing -&gt; boolean
    __isEqual : number number number -&gt; boolean
    Determines whether the two arguments are equal, or in the case of
    floating point numbers, within a specified number of decimal points
    precision (by default, checks to with 4 decimal points for floating
    point numbers). Returns None when attempting to compare ints and floats
    to anything other than ints and floats.
    
    Examples:
    &gt;&gt;&gt; __isEqual('ab', 'a'+'b')
     True
     
    &gt;&gt;&gt; __isEqual(12.34, 12.35)
     False
     
    &gt;&gt;&gt; __isEqual(12.3456, 12.34568, 4)
     True
         
    &gt;&gt;&gt; __isEqual(12.3456, 12.34568w5)
     False
    """
    if (x is None and y is not None) or (y is None and x is not None):
        return False
    elif x is None and y is None:
        return True
    elif (type(x) == int or type(x) == float) and \
             (type(y) != int and type(y) != float) or \
         (type(y) == int or type(y) == float) and \
             (type(x) != int and type(x) != float):
        return None
    elif type(x) == int and type(y) == int:
        return x == y
    elif type(x) == float or type(y) == float:
        if len(args) == 1:
            error = 10 ** (- args[0])
        else:
            error = 0.0001
        return abs(x - y) &lt; error
    elif __isseqtype(x) and __isseqtype(y) and len(x)==len(y):
        res = True
        for (x1,y1) in zip(x, y):
            res = res and __isEqual(x1, y1, *args)
        return res
    else:
        return x == y

def __isseqtype(x):
    return type(x) == list or type(x) == tuple

</content>
        <encoding>0</encoding>
      </execution_file>
      <execution_file id="">
        <name>execution_files/evalLab3c.py</name>
        <content>import sys

""" Skeleton for eval tests:::

# test for problem X - DESCRIPTION
try:
    
except:
    
    
"""


def comment(s):
    '''formats strings to create VPL comments'''
    print('Comment :=&gt;&gt; ' + s)


def grade(num):
    '''formats a number to create a VPL grade'''
    print('Grade :=&gt;&gt; ' + str(num))


try:
    import lab3c
except Exception as e:
    comment("Unable to import lab file  " + str(e))
    grade(0)
    exit()

test_grade = 0

# test Problem 24
try:
    
    assert lab3c.total_purchase(2,4) == 40.00, "Incorrect - retun values for purchases 50 and over are not correct"
    test_grade += 0.25
    assert lab3c.total_purchase(3,2) == 38.25, "Incorrect - retun values for purchases 40 - 50 range are not correct - make sure function rounds to two decimal places"
    test_grade += 0.25
    assert lab3c.total_purchase(0,4) == 27.0, "Incorrect - retun values for purchases 30 - 40 range are not correct"
    test_grade += 0.25
    assert lab3c.total_purchase(1,1) == 17.5, "Incorrect - retun values for under 30 are not correct"
    test_grade += 0.25
    comment("Problem 24 - Correct")
    
except AttributeError:
	comment("Problem 24 - missing or misnamed function")  
except Exception as e :
    comment("Problem 24 - " + str(e))



grade(test_grade)</content>
        <encoding>0</encoding>
      </execution_file>
    </execution_files>
    <variations>
    </variations>
    <submissions>
    </submissions>
  </vpl>
</activity>